#include <cstddef>
#include <cmath>
#include <iostream>

// Prints elements within a range [i,j).
// warning: print last space is mandatory
template <typename I>
// I models forward iterator
void print_range (I i, I j)
{
    for ( ; i != j ; ++ i) {
        std::cout << *i << " " ;
    }
}

// Calculates Greatest Commom Divisor.
template <typename T>
// T models integer
T gcd (T x, T y)
{
    while (true) {
        if (x == T (0)) return y ;
        y %= x ;
        if (y == T (0)) return x ;
        x %= y ;
    }
}

// Calculates Least Commom Multiple.
// uses eq: lcm (x, y) * gcd (x, y) == xy
template <typename T>
T lcm (T x, T y)
{
    T tmp (gcd (x, y)) ;
    return tmp ? (x * y / tmp) : T (0) ;
}

// Implementation of Blum Blum Shub generator for integers.
// Reference:
// Blum, Lenore; Blum, Manuel; Shub, Mike (1 May 1986).
// "A Simple Unpredictable Pseudo-Random Number Generator".
// SIAM Journal on Computing 15 (2): 364â€“383.
class BlumBlumShub {

    size_t seed, p, q, x ;

    // Sets state.
    inline
    void set_state (size_t seed, size_t p, size_t q)
    {
        this->seed = seed ;
        this->p = p ;
        this->q = q ;
        this->x = seed ;
    }

    public:

    // constructor
    BlumBlumShub (size_t seed, size_t p, size_t q)
    {
        set_state (seed, p, q) ;
    }

    // default constructor
    // this small seed and prime factors generate large cycles
    BlumBlumShub ()
    {
        set_state (size_t (3), size_t (11), size_t (19)) ;
    }

    // copy-constructor
    BlumBlumShub (const BlumBlumShub& g)
    {
        set_state (g.seed, g.p, g.q) ;
    }

    // assignment operator
    BlumBlumShub& operator= (const BlumBlumShub& g)
    {
        if (this != &g) new (this) BlumBlumShub (g) ;
        return *this ;
    }

    // Generates next random number and updates state.
    size_t operator() (void)
    {
        x = (x * x) % (p * q) ;
        return x ;
    }

    // May be useful to jump to a desired distance...
    // (uses Euler's Theorem)
    size_t operator() (const size_t i)
    {
        size_t e (pow (2, i)) ;
        e %= lcm (p - 1, q - 1) ;
        x = size_t (pow (seed, e)) ;
        x %= p * q ;
        return x ;
    }

} ;

// Fills range [i,j) with random numbers generated by f.
template <typename R>
// R models generator function
void generate (R& f, size_t* i, size_t* j)
{
    for ( ; i != j ; ++ i) *i = f () ;
}

int main (int argc, const char *argv[])
{
    size_t seed, p, q, n ;
    std::cin >> seed >> p >> q >> n ;
    size_t *a (new size_t[n]) ;
    BlumBlumShub f (seed, p, q) ;
    generate (f, a, a + n) ;
    print_range (a, a + n) ;
    std::cout << std::endl ;
    delete a ;
    return 0 ;
}

